; .\Objects\按键_电机实用程序.SRC generated from: 按键_电机实用程序.c
; COMPILER INVOKED BY:
;        D:\Keil_v5\C51\BIN\C51.EXE 按键_电机实用程序.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\按键_电机实用程序.lst) TABS(2) SRC(.\Objects\按键_电机实用程序.SRC)

$NOMOD51

NAME	_________________

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?main?_________________               SEGMENT CODE 
?PR?_StartMotor?_________________        SEGMENT CODE 
?DT?_StartMotor?_________________        SEGMENT DATA OVERLAYABLE 
?PR?InterruptTimer0?_________________    SEGMENT CODE 
?DT?_________________                    SEGMENT DATA 
?C_INITSEG           SEGMENT CODE 
?CO?_________________                    SEGMENT CODE 
	EXTRN	CODE (?C_STARTUP)
	EXTRN	CODE (?C?LMUL)
	EXTRN	CODE (?C?ULDIV)
	EXTRN	CODE (?C?ULCMP)
	PUBLIC	beats
	PUBLIC	InterruptTimer0
	PUBLIC	_StartMotor
	PUBLIC	main

	RSEG  ?DT?_StartMotor?_________________
?_StartMotor?BYTE:
      angle?140:   DS   4

	RSEG  ?DT?_________________
      index?242:   DS   1
          beats:   DS   4

	RSEG  ?CO?_________________
BeatCode?243:
	DB	00EH
	DB	00CH
	DB	00DH
	DB	009H
	DB	00BH
	DB	003H
	DB	007H
	DB	006H


	RSEG  ?C_INITSEG
	DB	004H
	DB	beats
	DB	000H,000H,000H,000H	; long

	DB	001H
	DB	index?242
	DB	000H

; #include <reg52.h>
; 
; unsigned long beats = 0;
; void StartMotor(unsigned long angle);
; void main()

	RSEG  ?PR?main?_________________
main:
	USING	0
			; SOURCE LINE # 5
; {
			; SOURCE LINE # 6
; 	//中断
; 	EA = 1;
			; SOURCE LINE # 8
	SETB 	EA
; 	ET0 = 1;
			; SOURCE LINE # 9
	SETB 	ET0
; 	
; 	//定时器。定时器2ms用来刷新节拍（电机的特性，>1.8ms才能启动）
; 	TH0 = (65536-2000)/256;
			; SOURCE LINE # 12
	MOV  	TH0,#0F8H
; 	TL0 = (65536-2000)%256;
			; SOURCE LINE # 13
	MOV  	TL0,#030H
; 	TMOD = 0x01;
			; SOURCE LINE # 14
	MOV  	TMOD,#01H
; 	TR0 = 1;
			; SOURCE LINE # 15
	SETB 	TR0
; 	
; 	StartMotor(90);
			; SOURCE LINE # 17
	MOV  	R7,#05AH
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_StartMotor
?C0001:
; 	while(1);
			; SOURCE LINE # 18
	SJMP 	?C0001
; END OF main

; }
; 
; void StartMotor(unsigned long angle)

	RSEG  ?PR?_StartMotor?_________________
_StartMotor:
	USING	0
			; SOURCE LINE # 21
	MOV  	angle?140+03H,R7
	MOV  	angle?140+02H,R6
	MOV  	angle?140+01H,R5
	MOV  	angle?140,R4
; {
			; SOURCE LINE # 22
; 	EA = 0;		//因为angle是long型，所以操作之前关闭中断
			; SOURCE LINE # 23
	CLR  	EA
; 	beats = (angle*4076)/360;
			; SOURCE LINE # 24
	CLR  	A
	MOV  	R7,#0ECH
	MOV  	R6,#0FH
	MOV  	R5,A
	MOV  	R4,A
	MOV  	R3,angle?140+03H
	MOV  	R2,angle?140+02H
	MOV  	R1,angle?140+01H
	MOV  	R0,angle?140
	LCALL	?C?LMUL
	CLR  	A
	MOV  	R3,#068H
	MOV  	R2,#01H
	MOV  	R1,A
	MOV  	R0,A
	LCALL	?C?ULDIV
	MOV  	beats+03H,R7
	MOV  	beats+02H,R6
	MOV  	beats+01H,R5
	MOV  	beats,R4
; 	EA = 1;
			; SOURCE LINE # 25
	SETB 	EA
; }
			; SOURCE LINE # 26
	RET  	
; END OF _StartMotor

CSEG	AT	0000BH
	LJMP	InterruptTimer0

; 
; void InterruptTimer0() interrupt 1

	RSEG  ?PR?InterruptTimer0?_________________
	USING	0
InterruptTimer0:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR1
	PUSH 	AR2
	PUSH 	AR3
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 28
; {
; 	unsigned char tmp;
; 	static unsigned char index = 0;
; 	unsigned char code BeatCode[8] = {
; 		0x0E, 0x0C, 0x0D, 0x09, 0x0B, 0x03, 0x07, 0x06
; 	};
; 	TH0 = (65536-2000)/256;
			; SOURCE LINE # 35
	MOV  	TH0,#0F8H
; 	TL0 = (65536-2000)%256;	
			; SOURCE LINE # 36
	MOV  	TL0,#030H
; 	if (beats != 0)
			; SOURCE LINE # 37
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
	MOV  	R5,A
	MOV  	R4,A
	MOV  	R3,beats+03H
	MOV  	R2,beats+02H
	MOV  	R1,beats+01H
	MOV  	R0,beats
	CLR  	C
	LCALL	?C?ULCMP
	JZ   	?C0005
; 	{
			; SOURCE LINE # 38
; 		tmp = P1;
			; SOURCE LINE # 39
;---- Variable 'tmp?241' assigned to Register 'R7' ----
	MOV  	R7,P1
; 		tmp = tmp & 0xF0;
			; SOURCE LINE # 40
	ANL  	AR7,#0F0H
; 		tmp = tmp | BeatCode[index];
			; SOURCE LINE # 41
	MOV  	A,index?242
	MOV  	DPTR,#BeatCode?243
	MOVC 	A,@A+DPTR
	ORL  	AR7,A
; 		P1 = tmp;
			; SOURCE LINE # 42
	MOV  	P1,R7
; 		index++;
			; SOURCE LINE # 43
	INC  	index?242
; 		index = index &0x07;
			; SOURCE LINE # 44
	ANL  	index?242,#07H
; 		beats--;
			; SOURCE LINE # 45
	MOV  	A,beats+03H
	ADD  	A,#0FFH
	MOV  	beats+03H,A
	MOV  	A,beats+02H
	ADDC 	A,#0FFH
	MOV  	beats+02H,A
	MOV  	A,beats+01H
	ADDC 	A,#0FFH
	MOV  	beats+01H,A
	MOV  	A,beats
	ADDC 	A,#0FFH
	MOV  	beats,A
; 	}
			; SOURCE LINE # 46
	SJMP 	?C0007
?C0005:
; 	else
; 	{
			; SOURCE LINE # 48
; 		P1 = P1 |0x0F;
			; SOURCE LINE # 49
	ORL  	P1,#0FH
; 	}
			; SOURCE LINE # 50
; }			; SOURCE LINE # 51
?C0007:
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF InterruptTimer0

	END
